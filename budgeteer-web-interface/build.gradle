import org.apache.tools.ant.filters.ReplaceTokens

version = '1.0.6.BETA'

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.1.5.RELEASE")
    }
}

apply plugin: 'war'
apply plugin: 'spring-boot'

configurations {
    querydslapt

    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    all*.exclude group: 'log4j', module: 'log4j'
    all*.exclude group: 'org.slf4j', module: 'log4j-over-slf4j'
    all*.exclude group: 'org.apache.wicket', module: 'wicket'
}

ext {
    spring_boot_version = '1.1.8.RELEASE'
    query_dsl_version = '3.5.1'
    wicket_version = '6.17.0'
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            /* alle .java Dateien landen im war */
            srcDir 'src/main/java'
            srcDir 'src/main/resources'
        }
    }
}

processResources {
    filter ReplaceTokens, tokens: [
            "application.version": project.property("version")
    ]
}

dependencies {
    compile project(':budgeteer-aproda-importer')
    compile project(':budgeteer-ubw-importer')
    compile project(':budgeteer-resourceplan-importer')

    compile(
            [group: 'org.apache.wicket', name: 'wicket-spring', version: "${wicket_version}"],
            [group: 'org.wicketstuff', name: 'wicketstuff-lazymodel', version: "${wicket_version}"],
            [group: 'com.googlecode.wicked-charts', name: 'wicked-charts-wicket6', version: '1.5.0'],
    )

    compile group: 'org.springframework', name: 'spring-webmvc', version: '4.1.1.RELEASE'
    compile(
            [group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: "${spring_boot_version}"],
            [group: 'org.springframework.boot', name: 'spring-boot-starter-logging', version: "${spring_boot_version}"],
            [group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: "${spring_boot_version}"],
    )
    providedCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-jetty', version: "${spring_boot_version}")

    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.6.4'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.0.1'
    compile group: 'ch.qos.logback', name: 'logback-core', version: '1.0.1'

    compile group: 'org.reflections', name: 'reflections', version: '0.9.9-RC1'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.3.2'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.9'

    compile group: 'joda-time', name: 'joda-time', version: '2.5'
    compile group: 'org.joda', name: 'joda-money', version: '0.9.1'

    compile(
            [group: 'com.mysema.querydsl', name: 'querydsl-apt', version: "${query_dsl_version}"],
            [group: 'com.mysema.querydsl', name: 'querydsl-jpa', version: "${query_dsl_version}"]
    )

    compile group: 'org.liquibase',  name: 'liquibase-core', version: '3.3.2'

    runtime(
            [group: 'org.hsqldb', name: 'hsqldb', version: '2.3.2'],
            [group: 'mysql', name: 'mysql-connector-java', version: '5.1.34'],
            files("lib/ojdbc6.jar")
    )

    testCompile(
            [group: 'org.kubek2k', name: 'springockito', version: '1.0.9'],
            [group: 'org.kubek2k', name: 'springockito-annotations', version: '1.0.9'],
            [group: 'com.github.springtestdbunit', name: 'spring-test-dbunit', version: '1.1.0'],
            [group: 'org.dbunit', name: 'dbunit', version: '2.5.0'],
    )

    testCompile "org.springframework.boot:spring-boot-starter-test" // version?

    providedCompile "org.projectlombok:lombok:1.14.8"
}

sourceSets {
    generated {
        java {
            srcDirs = ['src/generated/java']
        }
    }
}

task generateQueryDSL(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL query types') {

    source = sourceSets.main.java
    classpath = configurations.compile + configurations.querydslapt
    options.compilerArgs = [
            "-proc:only",
            "-processor", "com.mysema.query.apt.jpa.JPAAnnotationProcessor"
    ]

    destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
}

compileJava {
    dependsOn generateQueryDSL
    source generateQueryDSL.destinationDir
}

compileGeneratedJava {
    dependsOn generateQueryDSL
    options.warnings = false
    classpath += sourceSets.main.runtimeClasspath
}

clean {
    delete sourceSets.generated.java.srcDirs
}

bootRun {
    // default application configuration for running application via bootRun in development mode
    // (in production, these properties are defined in application.properties)
    jvmArgs '-Xdebug',
            '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=9009',
            '-Dserver.port=8080',
            '-Dwicket.configurationType=DEVELOPMENT',
            //'-Dspring.datasource.url=jdbc:hsqldb:file:../../database/budgeteer;shutdown=true;hsqldb.write_delay=false;',
            '-Dspring.datasource.url=jdbc:hsqldb:mem:budgeteer',
            '-Dspring.datasource.driverClassName=org.hsqldb.jdbcDriver',
            '-Dspring.datasource.username=sa',
            '-Dspring.datasource.password='
}

idea {
    module {
        scopes.PROVIDED.plus += [configurations.providedCompile]
        sourceDirs += sourceSets.generated.java.srcDirs
        downloadSources = true
    }
}