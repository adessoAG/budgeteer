import org.gradle.internal.jvm.Jvm

apply plugin: 'idea'

task wrapper(type: Wrapper) {
    gradleVersion '2.14.1'
}

allprojects {
    version = '1.0.5.TESTING'
}

subprojects {
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'jacoco'

    repositories {
        mavenCentral()
        maven {
            name "Apache Snapshots"
            url "https://repository.apache.org/content/repositories/snapshots/"
        }
    }

    ext {
        spring_boot_version = '1.3.1.RELEASE'
        springloaded_version = '1.2.5.RELEASE'
        spring_webmvc_version = '4.2.4.RELEASE'

        query_dsl_version = '3.7.4'
        reflections_version = '0.9.10'

        wicket_spring_version = '7.4.0'
        wicketstuff_lazymodel_version = '7.4.0'
        wicketcharts_version = '2.0.0'

        slf4j_version = '1.7.21'
        logback_version = '1.1.7'

        joda_money_version = '0.11'
        joda_time_version = '2.9.4'
        joda_convert_version = '1.8.1'
        jollyday_version = '0.4.9'

        poi_version = '3.14'

        commons_codec_version = '1.10'
        commons_lang_version = '3.4'

        hsqldb_version = '2.3.4'
        mysql_version = '5.1.39'

        springockito_version = '1.0.9'
        spring_dbunit_version = '1.2.1'
        dbunit_version = '2.5.2'

        lombok_version = '1.16.10'

        liquibase_core_version = '3.5.1'
    }

    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.12'
        testCompile group: 'org.springframework', name: 'spring-test', version: '4.2.7.RELEASE'
    }

    compileJava {
        sourceCompatibility = '1.7'
        targetCompatibility = '1.7'
        compileJava.options.bootClasspath = "${Jvm.current().javaHome}/jre/lib/rt.jar"
    }

    jacocoTestReport {
        reports {
            xml.enabled false
            csv.enabled false
            html.destination "${buildDir}/jacocoHtml"
        }
    }
}

idea {
    project {
        jdkName = '1.8'
        languageLevel = '7'
        vcs = 'Git'

        /**
         * we are replacing
         * <![CDATA[
         *      <annotationProcessing enabled="false" useClasspath="true"/>
         * ]]>
         * by
         * <![CDATA[
         *      <annotationProcessing>
         *          <profile default="true" name="Default" enabled="true">
         *              <processorPath useClasspath="true" />
         *           </profile>
         *      </annotationProcessing>
         * ]]>
         */
        ipr.withXml {
            def node = it.asNode().component.find { it.@name == 'CompilerConfiguration' }.annotationProcessing[0];
            if (! node.profile) {
                // orig:
                def profile = new XmlParser().parseText('''
                  <profile default="true" name="Default" enabled="true">
                    <processorPath useClasspath="true" />
                  </profile>''')
                node.attributes().clear()
                node.append(profile)
            }
        }
    }
}
