allprojects {

    apply plugin: 'idea'

    idea {
        module {
            inheritOutputDirs = true
            downloadJavadoc = false
            downloadSources = true
        }
    }
}

idea {
    project {
        jdkName = '1.8'
        languageLevel = '7'
        vcs = 'Git'

        /**
         * we are replacing
         * <![CDATA[
         *      <annotationProcessing enabled="false" useClasspath="true"/>
         * ]]>
         * by
         * <![CDATA[
         *      <annotationProcessing>
         *          <profile default="true" name="Default" enabled="true">
         *              <processorPath useClasspath="true" />
         *           </profile>
         *      </annotationProcessing>
         * ]]>
         */
        ipr.withXml {
            def node = it.asNode().component.find { it.@name == 'CompilerConfiguration' }.annotationProcessing[0];
            if (!node.profile) {
                // orig:
                def profile = new XmlParser().parseText('''
                  <profile default="true" name="Default" enabled="true">
                    <processorPath useClasspath="true" />
                  </profile>''')
                node.attributes().clear()
                node.append(profile)
            }
        }
    }

    module {
        iml.withXml {
            // mark resource directories as such
            // cf. https://discuss.gradle.org/t/the-idea-plugin-breaks-the-new-intellij-13-iml-configuration/2456/10
            def sourceFolder = it.node.component.content.sourceFolder
            def content = it.asNode().component.content[0]

            def mainResourceFolder = sourceFolder.find { it.@url == 'file://$MODULE_DIR$/src/main/resources' }
            // in case there is no src/main/resources in this module
            if (mainResourceFolder != null) {
                def atts = mainResourceFolder.attributes()
                atts.remove('isTestSource')
                atts.put('type', 'java-resource')
            }

            def testResourceFolder = sourceFolder.find { it.@url == 'file://$MODULE_DIR$/src/test/resources' }
            // in case there is no src/test/resources in this module
            if (testResourceFolder != null) {
                def atts = testResourceFolder.attributes()
                atts.remove('isTestSource')
                atts.put('type', 'java-test-resource')
            }

            def generatedResourceFolder = sourceFolder.find { it.@url == 'file://$MODULE_DIR$/src/generated/java' }?.attributes()

            if (generatedResourceFolder != null) {
                generatedResourceFolder.put('generated', 'true')
            } else {
                def generatedNode = '''
                <sourceFolder url="file://$MODULE_DIR$/src/generated/java" isTestSource="false" generated="true" />'''
                content.append(new XmlParser().parseText(generatedNode))
            }

        }
    }
}
